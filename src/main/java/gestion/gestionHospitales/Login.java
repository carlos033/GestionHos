/*
 * To change this license header, choose License Headers in Project Properties. To change this template file, choose Tools | Templates and open the template in the editor.
 */
package gestion.gestionHospitales;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.Arrays;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.WindowConstants;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;

import gestion.api.MiApi;
import gestion.api.NetworkClient;
import gestion.api.VariablesLogin;
import gestion.dto.jwt.JwtRequestDTO;
import gestion.dto.jwt.JwtResponseDTO;
import retrofit2.Call;
import retrofit2.Response;
import retrofit2.Retrofit;

/**
 *
 * @author ck
 */
public class Login extends JFrame {

	private static final long serialVersionUID = 1L;
	private OpcionesHos panelOpc;

	public Login() {
		initComponents();
		passwordEditText.setText("");
		setTitle("GESTION HOSPITALARIA");
		setLocationRelativeTo(null);
	}

	private SwingWorker<Response<JwtResponseDTO>, Void> getWorker() {
		return new SwingWorker<Response<JwtResponseDTO>, Void>() {

			@Override
			protected Response<JwtResponseDTO> doInBackground() throws Exception {
				Response<JwtResponseDTO> respuestaInicioSesion = iniciarSesion();
				return respuestaInicioSesion;
			}

			@Override
			protected void done() {
				Response<JwtResponseDTO> resultado;
				try {
					resultado = get();
					if (resultado.isSuccessful()) {
						guardarInfoEnVariables(resultado.body().getJwttoken(), usernameEditText.getText());
						panelOpc = new OpcionesHos(Login.this, true);
						panelOpc.setVisible(true);
						dispose();
					} else {
						JsonObject convertedObject = new Gson().fromJson(resultado.errorBody().string(), JsonObject.class);
						JsonElement msgElement = convertedObject.get("message");
						JOptionPane.showMessageDialog(null, "Error usuario " + msgElement.toString());
					}
				} catch (InterruptedException | ExecutionException ex) {
					JOptionPane.showMessageDialog(null, "Fallo de comunicacion " + ex);
				} catch (IOException ex) {
					Logger.getLogger(AniadirCitas.class.getName()).log(Level.SEVERE, null, ex);
				}
			}
		};
	}

	public Response<JwtResponseDTO> iniciarSesion() {
		Retrofit retrofit = NetworkClient.getRetrofitClient();
		MiApi myAPI = retrofit.create(MiApi.class);
		JwtRequestDTO jwtRequestDTO = new JwtRequestDTO();
		jwtRequestDTO.setIdentificador(usernameEditText.getText());
		char[] passwordChars = passwordEditText.getPassword();
		String password = new String(passwordChars);
		jwtRequestDTO.setPassword(password);
		Call<JwtResponseDTO> llamadaLogin = myAPI.login(jwtRequestDTO);

		Response<JwtResponseDTO> resp = null;
		try {
			resp = llamadaLogin.execute();
		} catch (IOException ex) {
			Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
		}
		Arrays.fill(passwordChars, ' ');
		return resp;
	}

	private void guardarInfoEnVariables(String jwttoken, String idUsuario) {
		VariablesLogin.setToken(jwttoken);
		VariablesLogin.setIdUsuario(idUsuario);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	private void initComponents() {

		usernameEditText = new JTextField();
		jLabel1 = new JLabel();
		jLabel2 = new JLabel();
		passwordEditText = new JPasswordField();
		loginButton = new JButton();

		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

		usernameEditText.setText("M");

		jLabel1.setText("Usuario:");

		jLabel2.setText("Password:");

		loginButton.setText("Login");
		loginButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				loginButtonActionPerformed(evt);
			}
		});

		GroupLayout layout = new GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
		        layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGap(76, 76, 76).addComponent(loginButton).addContainerGap(132, Short.MAX_VALUE)).addGroup(GroupLayout.Alignment.TRAILING,
		                layout.createSequentialGroup()
		                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
		                                .addGroup(layout.createSequentialGroup().addGap(16, 16, 16).addComponent(jLabel2).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		                                        .addComponent(passwordEditText, GroupLayout.PREFERRED_SIZE, 152, GroupLayout.PREFERRED_SIZE))
		                                .addGroup(layout.createSequentialGroup().addGap(18, 18, 18).addComponent(jLabel1).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		                                        .addComponent(usernameEditText, GroupLayout.PREFERRED_SIZE, 152, GroupLayout.PREFERRED_SIZE)))
		                        .addGap(25, 25, 25)));
		layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
		        .addGroup(layout.createSequentialGroup().addGap(17, 17, 17)
		                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(jLabel1).addComponent(usernameEditText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18)
		                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(jLabel2).addComponent(passwordEditText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18)
		                .addComponent(loginButton).addContainerGap(24, Short.MAX_VALUE)));

		pack();
	}

	private void loginButtonActionPerformed(ActionEvent evt) {
		if (!usernameEditText.getText().startsWith("M")) {
			JOptionPane.showMessageDialog(null, "El nÂº de licencia debe emepezar por 'M'");
		} else {
			getWorker().execute();
		}
	}

	public static void main(String args[]) {

		try {
			for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		java.awt.EventQueue.invokeLater(() -> {
			new Login().setVisible(true);
		});
	}

	private JLabel jLabel1;
	private JLabel jLabel2;
	private JButton loginButton;
	private JPasswordField passwordEditText;
	private JTextField usernameEditText;
}
