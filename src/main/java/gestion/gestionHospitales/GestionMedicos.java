/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gestion.gestionHospitales;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import gestion.api.MiApi;
import gestion.api.NetworkClient;
import gestion.api.VariablesLogin;
import gestion.dto.CitaDTO;
import gestion.dto.InformeDTO;
import gestion.dto.PacienteDTO;
import gestion.textArea.TxtAreaCitas;
import gestion.textArea.TxtAreaInformes;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import retrofit2.Call;
import retrofit2.Response;
import retrofit2.Retrofit;

/**
 *
 * @author ck
 */
public class GestionMedicos extends javax.swing.JDialog {

    private final String token;
    private final String nLicencia;
    private List<PacienteDTO> listaP;
    private List<InformeDTO> listaI;
    private List<InformeDTO> listaIM;
    private List<CitaDTO> listaC;

    /**
     * Creates new form OptMedicos
     *
     * @param parent
     * @param modal
     */
    public GestionMedicos(javax.swing.JDialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setTitle("GESTIONES MÃ‰DICAS");
        setLocationRelativeTo(null);
        token = VariablesLogin.getToken();
        nLicencia = VariablesLogin.getIdUsuario();
        cargaPaciente().execute();
    }

    private SwingWorker<Response<List<PacienteDTO>>, Void> cargaPaciente() {
        return new SwingWorker<Response<List<PacienteDTO>>, Void>() {
            @Override
            protected Response<List<PacienteDTO>> doInBackground() throws Exception {
                Response<List<PacienteDTO>> listP = listarPaciente();
                return listP;
            }

            @Override
            protected void done() {
                Response<List<PacienteDTO>> resultado;
                try {
                    resultado = get();
                    if (resultado.isSuccessful()) {
                        listaP = resultado.body();
                        CmbPaciente.removeAllItems();
                        CmbPaciente.addItem("");
                        for (int i = 0; i < listaP.size(); i++) {
                            CmbPaciente.addItem(listaP.get(i).getnSS());
                        }
                    } else {
                        JsonObject convertedObject = new Gson().fromJson(resultado.errorBody().string(), JsonObject.class);
                        JsonElement msgElement = convertedObject.get("message");
                        JOptionPane.showMessageDialog(null, "Error de carga " + msgElement.toString());
                    }
                } catch (InterruptedException | ExecutionException ex) {
                    JOptionPane.showMessageDialog(null, "Fallo de comunicacion " + ex);
                } catch (IOException ex) {
                    Logger.getLogger(AniadirCitas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
    }

    private Response<List<PacienteDTO>> listarPaciente() {
        Retrofit retrofit = NetworkClient.getRetrofitClientWithToken(token);
        MiApi myAPI = retrofit.create(MiApi.class);
        Call<List<PacienteDTO>> call = myAPI.listPacientes();
        Response<List<PacienteDTO>> resp = null;
        try {
            resp = call.execute();
        } catch (IOException ex) {
            Logger.getLogger(Login.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        return resp;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        CmbPaciente = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        CmbInforme = new javax.swing.JComboBox<>();
        CmbInforme.addItem("");
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        BtnListarC = new javax.swing.JButton();
        BtnEliminar = new javax.swing.JButton();
        BtnListarI = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        CmbPaciente.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        CmbPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmbPacienteActionPerformed(evt);
            }
        });

        jLabel2.setText("Nombre del informe");

        CmbInforme.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        CmbInforme.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setText("Pacientes");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CmbInforme, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CmbPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(0, 40, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(11, 11, 11)
                .addComponent(CmbPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CmbInforme, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        BtnListarC.setText("<html> Listar<br>Citas</html>");
        BtnListarC.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnListarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnListarCActionPerformed(evt);
            }
        });

        BtnEliminar.setText("<html> Eliminar<br>Informe</html>");
        BtnEliminar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnEliminarActionPerformed(evt);
            }
        });

        BtnListarI.setText("<html> Listar <br>Informes</html>");
        BtnListarI.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, null, new java.awt.Color(204, 204, 204)));
        BtnListarI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnListarIActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(BtnListarI, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                    .addComponent(BtnEliminar)
                    .addComponent(BtnListarC, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BtnListarC, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BtnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BtnListarI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void CmbPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmbPacienteActionPerformed
        CmbInforme.removeAllItems();
        CmbInforme.addItem("");
        cargaInforme().execute();
    }//GEN-LAST:event_CmbPacienteActionPerformed
    private SwingWorker<Response<List<InformeDTO>>, Void> cargaInforme() {
        return new SwingWorker<Response<List<InformeDTO>>, Void>() {
            @Override
            protected Response<List<InformeDTO>> doInBackground() throws Exception {
                Response<List<InformeDTO>> cargaI = cargaI();
                return cargaI;
            }

            @Override
            protected void done() {
                Response<List<InformeDTO>> resultado;
                try {
                    resultado = get();
                    if (resultado.isSuccessful()) {
                        listaI = resultado.body();
                        if (listaI.isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Este paciente no tiene informes");
                        } else {
                            for (int i = 0; i < listaI.size(); i++) {
                                CmbInforme.addItem(listaI.get(i).getNombreInf());
                            }
                        }
                    }
                } catch (InterruptedException | ExecutionException ex) {
                    JOptionPane.showMessageDialog(null, "Fallo de comunicacion" + ex);
                }
            }
        };
    }

    private Response<List<InformeDTO>> cargaI() {
        String nSS = CmbPaciente.getSelectedItem().toString();
        Retrofit retrofit = NetworkClient.getRetrofitClientWithToken(token);
        MiApi myAPI = retrofit.create(MiApi.class);
        Call<List<InformeDTO>> call = myAPI.buscarInformesXPaciente(nSS);
        Response<List<InformeDTO>> resp = null;
        try {
            resp = call.execute();
        } catch (IOException ex) {
            Logger.getLogger(Login.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        return resp;
    }
    private void BtnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnEliminarActionPerformed
        if (CmbPaciente.getSelectedItem().toString().equals("")) {
            JOptionPane.showMessageDialog(null, "Seleccione un Informe");
        } else {
            elininarI().execute();
        }
    }//GEN-LAST:event_BtnEliminarActionPerformed
    private SwingWorker<Response<Void>, Void> elininarI() {
        return new SwingWorker<Response<Void>, Void>() {
            @Override
            protected Response<Void> doInBackground() throws Exception {
                Response<Void> eI = elininarInfome();
                return eI;
            }

            @Override
            protected void done() {
                Response<Void> resultado;
                try {
                    resultado = get();
                    if (resultado.isSuccessful()) {
                        JOptionPane.showMessageDialog(null, "Informe eliminado correctamente");
                        CmbInforme.removeAllItems();
                        CmbInforme.addItem("");
                        CmbPaciente.setSelectedIndex(0);
                    } else {
                        JsonObject convertedObject = new Gson().fromJson(resultado.errorBody().string(), JsonObject.class);
                        JsonElement msgElement = convertedObject.get("message");
                        JOptionPane.showMessageDialog(null, "Error de carga " + msgElement.toString());
                    }
                } catch (InterruptedException | ExecutionException ex) {
                    JOptionPane.showMessageDialog(null, "Fallo de comunicacion " + ex);
                } catch (IOException ex) {
                    Logger.getLogger(AniadirCitas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
    }

    private Response<Void> elininarInfome() {
        String nomb = CmbInforme.getSelectedItem().toString();
        Retrofit retrofit = NetworkClient.getRetrofitClientWithToken(token);
        MiApi myAPI = retrofit.create(MiApi.class);
        Call<Void> call = myAPI.eliminarInforme(nomb);
        Response<Void> resp = null;
        try {
            resp = call.execute();
        } catch (IOException ex) {
            Logger.getLogger(Login.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        return resp;
    }
    private void BtnListarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnListarCActionPerformed
        listarC().execute();
     }//GEN-LAST:event_BtnListarCActionPerformed
    private SwingWorker<Response<List<CitaDTO>>, Void> listarC() {
        return new SwingWorker<Response<List<CitaDTO>>, Void>() {
            @Override
            protected Response<List<CitaDTO>> doInBackground() throws Exception {
                Response<List<CitaDTO>> list = listarCita();
                return list;
            }

            @Override
            protected void done() {
                Response<List<CitaDTO>> resultado;
                try {
                    resultado = get();
                    if (resultado.isSuccessful()) {
                        listaC = resultado.body();
                        TxtAreaCitas t = new TxtAreaCitas(GestionMedicos.this, true, listaC);
                        t.setVisible(true);
                    } else {
                        JsonObject convertedObject = new Gson().fromJson(resultado.errorBody().string(), JsonObject.class);
                        JsonElement msgElement = convertedObject.get("message");
                        JOptionPane.showMessageDialog(null, "Error de carga " + msgElement.toString());
                    }
                } catch (InterruptedException | ExecutionException ex) {
                    JOptionPane.showMessageDialog(null, "Fallo de comunicacion " + ex);
                } catch (IOException ex) {
                    Logger.getLogger(AniadirCitas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
    }

    private Response<List<CitaDTO>> listarCita() {
        Retrofit retrofit = NetworkClient.getRetrofitClientWithToken(token);
        MiApi myAPI = retrofit.create(MiApi.class);
        Call<List<CitaDTO>> call = myAPI.buscarCitaXMedico(nLicencia);
        Response<List<CitaDTO>> resp = null;
        try {
            resp = call.execute();
        } catch (IOException ex) {
            Logger.getLogger(Login.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        return resp;
    }
    private void BtnListarIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnListarIActionPerformed
        listarI().execute();
    }//GEN-LAST:event_BtnListarIActionPerformed
    private SwingWorker<Response<List<InformeDTO>>, Void> listarI() {
        return new SwingWorker<Response<List<InformeDTO>>, Void>() {
            @Override
            protected Response<List<InformeDTO>> doInBackground() throws Exception {
                Response<List<InformeDTO>> list = listarInf();
                return list;
            }

            @Override
            protected void done() {
                Response<List<InformeDTO>> resultado;
                try {
                    resultado = get();
                    if (resultado.isSuccessful()) {
                        listaIM = resultado.body();
                        TxtAreaInformes t = new TxtAreaInformes(GestionMedicos.this, true, listaIM);
                        t.setVisible(true);
                    } else {
                        JsonObject convertedObject = new Gson().fromJson(resultado.errorBody().string(), JsonObject.class);
                        JsonElement msgElement = convertedObject.get("message");
                        JOptionPane.showMessageDialog(null, "Error de carga " + msgElement.toString());
                    }
                } catch (InterruptedException | ExecutionException ex) {
                    JOptionPane.showMessageDialog(null, "Fallo de comunicacion " + ex);
                } catch (IOException ex) {
                    Logger.getLogger(AniadirCitas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
    }

    private Response<List<InformeDTO>> listarInf() {
        Retrofit retrofit = NetworkClient.getRetrofitClientWithToken(token);
        MiApi myAPI = retrofit.create(MiApi.class);
        Call<List<InformeDTO>> call = myAPI.buscarInformesXMedico(nLicencia);
        Response<List<InformeDTO>> resp = null;
        try {
            resp = call.execute();
        } catch (IOException ex) {
            Logger.getLogger(Login.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        return resp;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnEliminar;
    private javax.swing.JButton BtnListarC;
    private javax.swing.JButton BtnListarI;
    private javax.swing.JComboBox<String> CmbInforme;
    private javax.swing.JComboBox<String> CmbPaciente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
