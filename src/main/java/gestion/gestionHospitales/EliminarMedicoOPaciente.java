/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gestion.gestionHospitales;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import gestion.api.MiApi;
import gestion.api.NetworkClient;
import gestion.api.VariablesLogin;
import gestion.dto.MedicoDTO;
import gestion.dto.PacienteDTO;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import retrofit2.Call;
import retrofit2.Response;
import retrofit2.Retrofit;

/**
 *
 * @author ck
 */
public class EliminarMedicoOPaciente extends javax.swing.JDialog {

    private List<MedicoDTO> listM = new ArrayList<>();
    private List<PacienteDTO> listP = new ArrayList<>();

    /**
     * Creates new form EliminarMOP
     *
     * @param parent
     * @param modal
     */
    public EliminarMedicoOPaciente(javax.swing.JDialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setTitle("Eliminar medicos/pacientes");
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        optMedico = new javax.swing.JRadioButton();
        optPaciente = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        cmbNombre = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jtLicencia = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        buttonGroup1.add(optMedico);
        optMedico.setText("Médico");
        optMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optMedicoActionPerformed(evt);
            }
        });

        buttonGroup1.add(optPaciente);
        optPaciente.setText("Paciente");
        optPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optPacienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(optMedico)
                    .addComponent(optPaciente))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(optMedico)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(optPaciente)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setText("Nombre");

        cmbNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbNombreActionPerformed(evt);
            }
        });

        jLabel2.setText("NSS/nº licencia");

        jButton1.setText("Eliminar");
        jButton1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jtLicencia.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtLicencia, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cmbNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(24, 24, 24)
                                .addComponent(jButton1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jtLicencia)
                                .addGap(32, 32, 32))))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void optMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optMedicoActionPerformed
        cmbNombre.removeAllItems();
        cmbNombre.addItem("");
        listarM().execute();
    }//GEN-LAST:event_optMedicoActionPerformed
    private SwingWorker<Response<List<MedicoDTO>>, Void> listarM() {
        return new SwingWorker<Response<List<MedicoDTO>>, Void>() {
            @Override
            protected Response<List<MedicoDTO>> doInBackground() throws Exception {
                Response<List<MedicoDTO>> listMd = listarMedico();
                return listMd;
            }

            @Override
            protected void done() {
                Response<List<MedicoDTO>> resultado;
                try {
                    resultado = get();
                    if (resultado.isSuccessful()) {
                        listM = resultado.body();
                        for (int i = 0; i < listM.size(); i++) {
                            cmbNombre.addItem(listM.get(i));
                        }
                    } else {
                        JsonObject convertedObject = new Gson().fromJson(resultado.errorBody().string(), JsonObject.class);
                        JsonElement msgElement = convertedObject.get("message");
                        JOptionPane.showMessageDialog(null, "Error de carga " + msgElement.toString());
                    }
                } catch (InterruptedException | ExecutionException ex) {
                    JOptionPane.showMessageDialog(null, "Fallo de comunicacion " + ex);
                } catch (IOException ex) {
                    Logger.getLogger(AniadirCitas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
    }

    private Response<List<MedicoDTO>> listarMedico() {
        String nomHos = VariablesLogin.getMedico().getHospital().getNombreHos();
        String token = VariablesLogin.getToken();
        Retrofit retrofit = NetworkClient.getRetrofitClientWithToken(token);
        MiApi myAPI = retrofit.create(MiApi.class);
        Call<List<MedicoDTO>> call = myAPI.BuscarMedicosXHospital(nomHos);
        Response<List<MedicoDTO>> resp = null;
        try {
            resp = call.execute();
        } catch (IOException ex) {
            Logger.getLogger(Login.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        return resp;
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (optPaciente.isSelected()) {
            if (jtLicencia.getText().startsWith("ES")) {
                elininarP().execute();
            } else {
                JOptionPane.showMessageDialog(null, "Seleccione una id");
            }
        } else if (optMedico.isSelected()) {
            if (jtLicencia.getText().startsWith("M")) {
                elininarM().execute();
            } else {
                JOptionPane.showMessageDialog(null, "Seleccione una id");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione medico o paciente");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private SwingWorker<Response<Void>, Void> elininarP() {
        return new SwingWorker<Response<Void>, Void>() {
            @Override
            protected Response<Void> doInBackground() throws Exception {
                Response<Void> eP = elininarPaciente();
                return eP;
            }

            @Override
            protected void done() {
                Response<Void> resultado;
                try {
                    resultado = get();
                    if (resultado.isSuccessful()) {
                        JOptionPane.showMessageDialog(null, "Paciente eliminada correctamente");
                        jtLicencia.setText("");
                        cmbNombre.removeAllItems();
                    } else {
                        JsonObject convertedObject = new Gson().fromJson(resultado.errorBody().string(), JsonObject.class);
                        JsonElement msgElement = convertedObject.get("message");
                        JOptionPane.showMessageDialog(null, "Error de carga " + msgElement.toString());
                    }
                } catch (InterruptedException | ExecutionException ex) {
                    JOptionPane.showMessageDialog(null, "Fallo de comunicacion " + ex);
                } catch (IOException ex) {
                    Logger.getLogger(AniadirCitas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
    }

    private Response<Void> elininarPaciente() {
        String id = jtLicencia.getText();
        String token = VariablesLogin.getToken();
        Retrofit retrofit = NetworkClient.getRetrofitClientWithToken(token);
        MiApi myAPI = retrofit.create(MiApi.class);
        Call<Void> call = myAPI.eliminarPaciente(id);
        Response<Void> resp = null;
        try {
            resp = call.execute();
        } catch (IOException ex) {
            Logger.getLogger(Login.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        return resp;
    }

    private SwingWorker<Response<Void>, Void> elininarM() {
        return new SwingWorker<Response<Void>, Void>() {
            @Override
            protected Response<Void> doInBackground() throws Exception {
                Response<Void> eM = elininarMedico();
                return eM;
            }

            @Override
            protected void done() {
                Response<Void> resultado;
                try {
                    resultado = get();
                    if (resultado.isSuccessful()) {
                        JOptionPane.showMessageDialog(null, "Medico eliminado correctamente");
                        jtLicencia.setText("");
                        cmbNombre.removeAllItems();
                    } else {
                        JsonObject convertedObject = new Gson().fromJson(resultado.errorBody().string(), JsonObject.class);
                        JsonElement msgElement = convertedObject.get("message");
                        JOptionPane.showMessageDialog(null, "Error de carga " + msgElement.toString());
                    }
                } catch (InterruptedException | ExecutionException ex) {
                    JOptionPane.showMessageDialog(null, "Fallo de comunicacion " + ex);
                } catch (IOException ex) {
                    Logger.getLogger(AniadirCitas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
    }

    private Response<Void> elininarMedico() {
        String id = jtLicencia.getText();;
        String token = VariablesLogin.getToken();
        Retrofit retrofit = NetworkClient.getRetrofitClientWithToken(token);
        MiApi myAPI = retrofit.create(MiApi.class);
        Call<Void> call = myAPI.eliminarMedico(id);
        Response<Void> resp = null;
        try {
            resp = call.execute();
        } catch (IOException ex) {
            Logger.getLogger(Login.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        return resp;
    }
    private void cmbNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbNombreActionPerformed
        jtLicencia.setText("");
        String selectNombre = cmbNombre.getSelectedItem() != null
                ? cmbNombre.getSelectedItem().toString() : "";
        if (optPaciente.isSelected() && !selectNombre.equals("")) {
            PacienteDTO paciente = (PacienteDTO) cmbNombre.getSelectedItem();
            jtLicencia.setText(paciente.getnSS());
        } else if (optMedico.isSelected() && !selectNombre.equals("")) {
            MedicoDTO medico = (MedicoDTO) cmbNombre.getSelectedItem();
            jtLicencia.setText(medico.getnLicencia());
        }
    }//GEN-LAST:event_cmbNombreActionPerformed

    private void optPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optPacienteActionPerformed
        cmbNombre.removeAllItems();
        cmbNombre.addItem("");
        listarP().execute();
    }//GEN-LAST:event_optPacienteActionPerformed
    private SwingWorker<Response<List<PacienteDTO>>, Void> listarP() {
        return new SwingWorker<Response<List<PacienteDTO>>, Void>() {
            @Override
            protected Response<List<PacienteDTO>> doInBackground() throws Exception {
                Response<List<PacienteDTO>> listP = listarPaciente();
                return listP;
            }

            @Override
            protected void done() {
                Response<List<PacienteDTO>> resultado;
                try {
                    resultado = get();
                    if (resultado.isSuccessful()) {
                        listP = resultado.body();
                        for (int i = 0; i < listP.size(); i++) {
                            cmbNombre.addItem(listP.get(i));
                        }
                    } else {
                        JsonObject convertedObject = new Gson().fromJson(resultado.errorBody().string(), JsonObject.class);
                        JsonElement msgElement = convertedObject.get("message");
                        JOptionPane.showMessageDialog(null, "Error de carga " + msgElement.toString());
                    }
                } catch (InterruptedException | ExecutionException ex) {
                    JOptionPane.showMessageDialog(null, "Fallo de comunicacion " + ex);
                } catch (IOException ex) {
                    Logger.getLogger(AniadirCitas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
    }

    private Response<List<PacienteDTO>> listarPaciente() {
        String token = VariablesLogin.getToken();
        Retrofit retrofit = NetworkClient.getRetrofitClientWithToken(token);
        MiApi myAPI = retrofit.create(MiApi.class);
        Call<List<PacienteDTO>> call = myAPI.listPacientes();
        Response<List<PacienteDTO>> resp = null;
        try {
            resp = call.execute();
        } catch (IOException ex) {
            Logger.getLogger(Login.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        return resp;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<Object> cmbNombre;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jtLicencia;
    private javax.swing.JRadioButton optMedico;
    private javax.swing.JRadioButton optPaciente;
    // End of variables declaration//GEN-END:variables
}
